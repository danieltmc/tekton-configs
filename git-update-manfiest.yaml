apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-cli
  namespace: tekton-tasks
  labels:
    app.kubernetes.io/version: '0.4'
  annotations:
    tekton.dev/pipelines.minVersion: '0.21.0'
    tekton.dev/categories: Git
    tekton.dev/tags: git
    tekton.dev/displayName: 'git cli'
    tekton.dev/platforms: 'linux/amd64,linux/s390x,linux/ppc64le'
spec:
  description: >-
    This task can be used to perform git operations.

    Git command that needs to be run can be passed as a script to
    the task. This task needs authentication to git in order to push
    after the git operation.

  workspaces:
    - name: source
      description: A workspace that contains the fetched git repository.

    - name: input
      optional: true
      description: |
        An optional workspace that contains the files that need to be added to git. You can
        access the workspace from your script using `$(workspaces.input.path)`, for instance:

          cp $(workspaces.input.path)/file_that_i_want .
          git add file_that_i_want
          # etc

    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.

    - name: basic-auth
      optional: true
      description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
  params:
    - name: USER_HOME
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      type: string
      default: '/root'

    - name: VERBOSE
      description: Log the commands that are executed during `git-clone`'s operation.
      type: string
      default: 'true'

    - name: IMAGE_SHA
      description: Docker image tag
      type: string
      default: 'latest'

  steps:
    - name: git
      image: alpine/git:latest
      workingDir: $(workspaces.source.path)
      env:
        - name: HOME
          value: $(params.USER_HOME)
        - name: PARAM_VERBOSE
          value: $(params.VERBOSE)
        - name: PARAM_USER_HOME
          value: $(params.USER_HOME)
        - name: WORKSPACE_OUTPUT_PATH
          value: $(workspaces.output.path)
        - name: IMAGE_SHA
          value: $(params.IMAGE_SHA)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      script: |
        #!/usr/bin/env sh
        set -eux # Added x for verbose output

        git clone https://github.com/Acuity-Inc/tsg-innolab-cncf-delivery-bakeoff
        cd tsg-innolab-cncf-delivery-bakeoff

        cd fluxcd/tech-challenge-ci-cd-api
        sed -i "s+danieltmcc/tsg-innolab-cicd-api.*+danieltmcc/tsg-innolab-cicd-api:${IMAGE_SHA}+g" tech-challenge-ci-cd-api-app.yaml
        git add .
        cd ../../argocd/tech-challenge-ci-cd-api
        sed -i "s+danieltmcc/tsg-innolab-cicd-api.*+danieltmcc/tsg-innolab-cicd-api:${IMAGE_SHA}+g" tech-challenge-ci-cd-api-app.yaml
        git add .
        git commit -m "Done by Tekton Pipelines - Job changemanifest: $IMAGE_SHA"
        git push origin main

        EXIT_CODE="$?"
        if [ "$EXIT_CODE" != 0 ]
        then
          exit $EXIT_CODE
        fi
        # No output needed
